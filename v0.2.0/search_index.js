var documenterSearchIndex = {"docs":
[{"location":"apireference/#API-reference","page":"API reference","title":"API reference","text":"","category":"section"},{"location":"apireference/#ASEconvert.ase","page":"API reference","title":"ASEconvert.ase","text":"Global constant representing the ase python module available from Julia.\n\n\n\n\n\n","category":"constant"},{"location":"apireference/#ASEconvert.ASEcalculator","page":"API reference","title":"ASEconvert.ASEcalculator","text":"ASEcalculator\n\nThis structure wraps python ASE calculator to AtomsCalculators interface compatible structure.\n\nExample\n\nusing ASEconvert\nusing AtomsBuilder\nusing AtomsCalculators\nusing PythonCall\n\nase_emt = pyimport(\"ase.calculators.emt\")\ncalc_emt = ASEcalculator(ase_emt.EMT())\n\nsystem = bulk(:Cu) * (4, 3, 2)\nAtomsCalculators.potential_energy(system, calc_emt)\nAtomsCalculators.forces(system, calc_emt)\nAtomsCalculators.virial(system, calc_emt)\n\n\n\n\n\n","category":"type"},{"location":"apireference/#ASEconvert.convert_ase-Union{Tuple{AbstractSystem{D}}, Tuple{D}} where D","page":"API reference","title":"ASEconvert.convert_ase","text":"convert_ase(system::AbstractSystem)\n\nConvert a passed system (which satisfies the AtomsBase.AbstractSystem interface) to an ase.Atoms datastructure. Conversions to other ASE objects from equivalent Julia objects may be added as additional methods in the future.\n\n\n\n\n\n","category":"method"},{"location":"#ASEconvert","page":"Home","title":"ASEconvert","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Light-weight module to install the atomistic simulation environment (ASE) and provide routines for cross-converting between ASE datastructures and the respective ones of the JuliaMolSim ecosystem. E.g. it allows to convert between the ASE Atoms and exposing them using an AtomsBase compatible interface or it allows to employ calculators from ASE as AtomsCalculators.","category":"page"},{"location":"#Automatic-ASE-installation","page":"Home","title":"Automatic ASE installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Using the mechanism provided by PythonCall and CondaPkg ASEconvert will automatically take care of installing ASE and exporting a useful subset of its modules under the ase variable. For example one may easily create bulk systems","category":"page"},{"location":"","page":"Home","title":"Home","text":"using ASEconvert\nase.build.bulk(\"Mg\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"or surfaces","category":"page"},{"location":"","page":"Home","title":"Home","text":"using ASEconvert\nase.build.surface(ase.build.bulk(\"Mg\"), (1, 1, 0), 4, 0, periodic=true)","category":"page"},{"location":"#Conversion-from-ASE-to-AtomsBase","page":"Home","title":"Conversion from ASE to AtomsBase","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using ASEconvert\n\n# Construct bulk magnesium using ASE and convert to atomsbase\nmg_ase = ase.build.bulk(\"Mg\")\nmg_atb = pyconvert(AbstractSystem, mg_ase)","category":"page"},{"location":"","page":"Home","title":"Home","text":"using DFTK\nusing PseudoPotentialData\n\n# Attach pseudopotentials, construct LDA DFT model and solve for DFT ground state\npseudopotentials = PseudoFamily(\"dojo.nc.sr.lda.v0_4_1.oncvpsp3.standard.upf\")\nmodel  = model_DFT(mg_atb; temperature=1e-3, smearing=Smearing.MarzariVanderbilt(),\n                   pseudopotentials, functionals=LDA())\nbasis  = PlaneWaveBasis(model; Ecut=20, kgrid=(4, 4, 4))\nscfres = self_consistent_field(basis)\n\nscfres.energies","category":"page"},{"location":"#Conversion-from-AtomsBase-to-ASE","page":"Home","title":"Conversion from AtomsBase to ASE","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using ASEconvert\nusing ExtXYZ\n\n# Read an extxyz file using AtomsIO.jl.\nsystem = ExtXYZ.Atoms(ExtXYZ.read_frame(\"Mn3Si.extxyz\"))","category":"page"},{"location":"","page":"Home","title":"Home","text":"This example uses ExtXYZ to read the extended XYZ file file Mn3Si.extxyz. The data is returned as a subtype of AtomsBase.AbstractSystem (in this case an ExtXYZ.Atoms from ExtXYZ). We can thus directly convert this system to an ase.Atoms using convert_ase and write it again as an ASE json file","category":"page"},{"location":"","page":"Home","title":"Home","text":"ase.io.write(\"out.json\", convert_ase(system));","category":"page"},{"location":"","page":"Home","title":"Home","text":"For a more convenient and feature-rich way of reading and writing atomic structures in julia see AtomsIO.","category":"page"},{"location":"#Employing-ASE-calculators-in-Julia","page":"Home","title":"Employing ASE calculators in Julia","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using PythonCall\nusing ASEconvert\n\nase_emt = pyimport(\"ase.calculators.emt\")\ncalculator = ASEcalculator(ase_emt.EMT())","category":"page"},{"location":"","page":"Home","title":"Home","text":"The above codeblock employs PythonCall to setup an EMT calculator in ASE. Using the ASEcalculator wrapper this calculator is wrapped and now exposes a standard AtomsCalculators-compatible interface. For example one can use it to compute energy and forces of a copper supercell.","category":"page"},{"location":"","page":"Home","title":"Home","text":"First we make the supercell:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using AtomsBuilder\nsystem = bulk(:Cu) * (4, 3, 2)  # Make copper supercell","category":"page"},{"location":"","page":"Home","title":"Home","text":"Next we use the energy_forces function from AtomsCalculators:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using AtomsCalculators\nAtomsCalculators.energy_forces(system, calculator)","category":"page"}]
}
